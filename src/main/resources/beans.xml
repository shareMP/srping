<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- 通过反射的方式
		class:类的全路径名
		id:标识bean，需要唯一，一般用类名，如果不设置，默认是类的全路径名
	 -->
	<bean id="helloWorld" class="com.mrl.spring.beans.HelloWorld">
		<!--
			注入方式：
			1. 属性注入
				通过setter方法注入,常用 
			2.构造器注入
				
		-->
		<property name="name" value="张三"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性  -->
	<bean id="car" class="com.mrl.spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="300000" index="2"></constructor-arg>
	</bean>
	
	<!-- 使用构造器注入属性可以指定参数的位置和类型用于区分重载的构造器 -->
	<bean id="car2" class="com.mrl.spring.beans.Car">
		<constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值保存特殊字符，用CDATA包起来  -->
		<!-- 属性值可以用value子节点进行配置 -->
		<constructor-arg  type="java.lang.String">
				<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<!-- value属性注入 -->
			<value>250</value>
		</constructor-arg>
	</bean>
	
	<!-- 对象之间的依赖 -->
	 <bean id="person" class="com.mrl.spring.beans.Person">
		<property name="name" value="小米"></property>
		<property name="gender" value="男"></property>
		
		<!--使用property的ref属性建立bean之间的依赖关系  -->
		<!-- <property name="car" ref="car2">
			ref子节点也可以
			<ref bean="car2"/>
		</property> -->
		
		<!-- 内部bean,不能在外部引用，只能在内部使用 -->
		 <property name="car">
			<bean class="com.mrl.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="ChangeAn"></constructor-arg>
				<constructor-arg value="20000" type="double"></constructor-arg>
			</bean>
		</property> 
		
		<property name="car.maxSpeed" value="260"></property>
		
	</bean>
	
	<bean id="person2" class="com.mrl.spring.beans.Person">
		<constructor-arg value="XiaoMing"></constructor-arg>
		<constructor-arg value="男"></constructor-arg>
		<!-- <constructor-arg ref="car"></constructor-arg> -->
		
		<!-- 测试赋值为null,默认也是null，可以不赋 -->
		<!-- <constructor-arg><null/></constructor-arg>
		 -->
		 
		 <!-- 为级联属性赋值,属性需要先初始化后才可以为级联属性赋值 否则会有异常-->
		 <constructor-arg ref="car"></constructor-arg>
		 <property name="car.maxSpeed" value="250"></property>
		 
	</bean>
	
	
	<!-- 集合属性的配置 -->
	<bean id="person3" class="com.mrl.spring.beans.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="gender" value="男"></property>
		<property name="cars">
			<!-- 集合  list list节点为list类型的属性赋值-->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
		</property>
	</bean>
	
	
	<!-- 配置map属性值 -->
	<bean id="newperson" class="com.mrl.spring.beans.collection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="gender" value="female"></property>
		<property name="cars">
		<!-- 使用map和entry来配置map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置properties属性值 -->
	<bean id="dataSource" class="com.mrl.spring.beans.collection.DataSource">
			<!-- 使用props和prop子节点为properties属性赋值 -->
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="pawwrod">123</prop>
				<prop key="jdbcUrl">jdbc:mysql://lcoahost:3306</prop>
				<prop key="driverClass">com.mysql.driver.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean  以供多个bean进行引用 ,需要导入util命名空间-->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="com.mrl.spring.beans.collection.Person">
		<property name="name" value="Jack"></property>
		<!-- 引用外面配置的集合 -->
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- p命名空间 ,简化配置,导入p命名空间-->
	<bean id="person5" class="com.mrl.spring.beans.collection.Person" p:name="哈哈" p:gender="Man" p:cars-ref="cars"></bean>
	
	<!-- 自动装配 -->
	
</beans>






